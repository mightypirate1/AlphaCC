services:
  trainer:
    image: alphacc/main
    build:
      dockerfile: Dockerfile.main
      target: runner
    depends_on:
      - redis
    volumes:
      - local:/mnt:rw
    env_file:
      - .env.docker
    command: [
      "alphacc-trainer",
      "--run-id=dbg-111-size-9",
      "--size=9",
      "--tournament-freq=30",
      "--n-train-samples=5000",
      "--replay-buffer-size=25000",
      "--epochs-per-update=5",
      "--policy-weight=1.0",
      "--value-weight=1.0",
      "--l2-reg=1e-4",
      "--batch-size=256",
      "--lr=1e-4",
    ]

  worker:
    image: alphacc/main
    depends_on:
      - trainer
    env_file:
      - .env.docker
    scale: 10
    restart: always
    command: [
      "alphacc-worker",
      "--size=9",
      "--n-rollouts=1000",
      "--rollout-depth=200",
      "--max-game-length=300",
      "--dirichlet-noise-weight=0.25",
    ]
    
  nn-service:
    image: alphacc/main
    depends_on:
      - trainer
    env_file:
      - .env.docker
    restart: always
    command: [
      "alphacc-nn-service",
      "--size=9",
    ]

  tensorboard:
    image: tensorflow/tensorflow
    network_mode: host
    depends_on:
      - trainer
    volumes:
      - local:/mnt:ro

  redis:
    image: redislabs/redismod
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 15
      start_period: 5s

volumes:
  local:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "./data"
